from html import escape

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup
from typing import Any

from app.steps_bot.services.buy_service import (
    finalize_successful_order,
    format_order_message,
    load_product_summary,
    ensure_purchase_allowed,
)
from app.steps_bot.db import repo
from app.steps_bot.services.validators import (
    normalize_phone,
    validate_address,
    validate_city,
    validate_full_name,
    validate_phone,
    validate_pvz_code,
)
from app.steps_bot.states.order import OrderInput, OrderStates


router = Router()


def pvz_list_kb(items: list[Any], page: int = 0) -> InlineKeyboardBuilder:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ü–í–ó –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    
    Args:
        items: —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ PVZ –∏–∑ –ë–î
        page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    """
    kb = InlineKeyboardBuilder()
    for item in items:
        kb.button(text=f"üìç {item.full_address[:40]}", callback_data=f"pvz:{item.id}")
    kb.adjust(1)
    return kb


def delivery_type_kb(return_cb: str | None = None) -> InlineKeyboardBuilder:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: —Ç–æ–ª—å–∫–æ –ü–í–ó + –Ω–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º.
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü–í–ó", callback_data="order:delivery:pvz")
    kb.button(text="‚Ü©", callback_data=return_cb or "catalog_root")
    kb.adjust(1, 1)
    return kb


def back_to_delivery_kb() -> InlineKeyboardBuilder:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="‚Ü©", callback_data="order:back")
    kb.adjust(1)
    return kb


def confirm_kb() -> InlineKeyboardBuilder:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="order:confirm")
    kb.button(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order:cancel")
    kb.button(text="‚Ü©", callback_data="order:back")
    kb.adjust(2, 1)
    return kb


def _extract_return_cb(markup: InlineKeyboardMarkup | None) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–ª–±—ç–∫ –∫–Ω–æ–ø–∫–∏ ¬´–Ω–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º¬ª –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    –ò—â–µ—Ç –∫–Ω–æ–ø–∫—É —Å callback_data, –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è –Ω–∞ 'cat:'.
    –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'catalog_root'.
    """
    if not markup or not getattr(markup, "inline_keyboard", None):
        return "catalog_root"
    for row in markup.inline_keyboard:
        for btn in row:
            data = getattr(btn, "callback_data", None)
            if isinstance(data, str) and data.startswith("cat:"):
                return data
    return "catalog_root"


def _extract_product_id(data: dict[str, Any]) -> int | None:
    """
    –î–æ—Å—Ç–∞—ë—Ç product_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–∏–ø.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    """
    value = data.get("product_id")
    return value if isinstance(value, int) else None


@router.callback_query(F.data.startswith("buy:"))
async def on_buy_click(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        _, product_id_str = callback.data.split(":")
        product_id = int(product_id_str)
        await state.update_data(product_id=product_id)
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞", show_alert=True)
        return

    allowed, msg = await ensure_purchase_allowed(callback.from_user.id, product_id)
    if not allowed:
        await callback.answer(msg, show_alert=True)
        return

    return_cb = _extract_return_cb(callback.message.reply_markup)

    await state.set_state(OrderStates.choosing_delivery_type)
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=delivery_type_kb(return_cb).as_markup(),
    )
    await callback.answer()


@router.callback_query(F.data == "order:back")
async def on_back_to_delivery(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä.
    """
    data = await state.get_data()
    product_id = int(data.get("product_id")) if data and data.get("product_id") else None
    await state.clear()
    if product_id is not None:
        await state.update_data(product_id=product_id)
    await state.set_state(OrderStates.choosing_delivery_type)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=delivery_type_kb().as_markup(),
    )
    await callback.answer()


@router.callback_query(
    OrderStates.choosing_delivery_type,
    F.data == "order:delivery:pvz",
)
async def on_delivery_type(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ (–ü–í–ó) –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥.
    """
    await state.update_data(delivery_type="pvz")
    await state.set_state(OrderStates.entering_city)
    await callback.message.edit_text(
        "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞):",
        reply_markup=back_to_delivery_kb().as_markup(),
    )
    await callback.answer()


@router.message(OrderStates.entering_city, F.text.len() > 0)
async def on_city_entered(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ü–í–ó –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """
    city = message.text.strip()
    if not validate_city(city):
        await message.answer("–ì–æ—Ä–æ–¥ —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.", reply_markup=back_to_delivery_kb().as_markup())
        return

    await state.update_data(city=city)

    # –ü–æ–ª—É—á–∞–µ–º –ü–í–ó –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    try:
        async with repo.get_session() as session:
            pvz_list = await repo.get_pvz_by_city(session, city)
    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ü–í–ó: {escape(str(e))}",
            reply_markup=back_to_delivery_kb().as_markup()
        )
        return

    if not pvz_list:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ü–í–ó –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.",
            reply_markup=back_to_delivery_kb().as_markup()
        )
        return

    kb = pvz_list_kb(pvz_list)
    kb.button(text="‚Ü©", callback_data="order:back")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏:",
        reply_markup=kb.as_markup(),
    )
    await state.set_state(OrderStates.entering_pvz_or_address)


@router.callback_query(F.data.startswith("pvz:"))
async def on_pvz_choose(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ü–í–ó –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É –§–ò–û.
    """
    _, pvz_id = callback.data.split(":")
    
    data = await state.get_data()
    if not data or not data.get("city"):
        await callback.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ", show_alert=True)
        return

    await state.update_data(pvz_id=pvz_id, address=None)
    await state.set_state(OrderStates.entering_full_name)
    await callback.message.edit_text(
        "–£–∫–∞–∂–∏—Ç–µ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é:",
        reply_markup=back_to_delivery_kb().as_markup(),
    )
    await callback.answer()


@router.message(OrderStates.entering_full_name, F.text.len() > 0)
async def on_full_name(message: Message, state: FSMContext) -> None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –§–ò–û –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω.
    """
    full_name = message.text.strip()
    if not validate_full_name(full_name):
        await message.answer("–§–ò–û –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.", reply_markup=back_to_delivery_kb().as_markup())
        return
    await state.update_data(full_name=full_name)
    await state.set_state(OrderStates.entering_phone)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567):",
        reply_markup=back_to_delivery_kb().as_markup(),
    )


@router.message(OrderStates.entering_phone, F.text.len() > 0)
async def on_phone(message: Message, state: FSMContext) -> None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    phone = normalize_phone(message.text)
    if not validate_phone(phone):
        await message.answer(
            "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –§–æ—Ä–º–∞—Ç: +79991234567.",
            reply_markup=back_to_delivery_kb().as_markup(),
        )
        return

    await state.update_data(phone=phone)
    data = await state.get_data()

    product_id = _extract_product_id(data)
    if product_id is None:
        await state.clear()
        await message.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        return

    product = await load_product_summary(product_id)
    if not product:
        await state.clear()
        await message.answer("–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —É–∂–µ –∫—É–ø–ª–µ–Ω.")
        return

    summary = [
        f"–¢–æ–≤–∞—Ä: {escape(str(product['title']))}",
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {escape(str(product['category'] or '‚Äî'))}",
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {escape(str(product['price']))} –±–∞–ª–ª–æ–≤",
        f"–ì–æ—Ä–æ–¥: {escape(str(data.get('city') or ''))}",
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {escape(str(data.get('full_name') or ''))}",
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {escape(str(data.get('phone') or ''))}",
    ]

    await state.set_state(OrderStates.confirming)
    await message.answer(
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n" + "\n".join(summary),
        reply_markup=confirm_kb().as_markup(),
    )


@router.callback_query(F.data == "order:cancel")
async def on_cancel(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    await state.clear()
    await callback.message.edit_text(
        "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=back_to_delivery_kb().as_markup(),
    )
    await callback.answer()


@router.callback_query(F.data == "order:confirm")
async def on_confirm(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑.
    """
    data = await state.get_data()
    if not data:
        await callback.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ", show_alert=True)
        return

    try:
        product_id = int(data.get("product_id"))
        pvz_id = data.get("pvz_id")
    except Exception:
        await callback.message.edit_text("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await callback.answer()
        return

    if not pvz_id:
        await callback.message.edit_text("–ù–µ –≤—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏.")
        await callback.answer()
        return

    allowed, msg = await ensure_purchase_allowed(callback.from_user.id, product_id)
    if not allowed:
        await callback.message.edit_text(msg)
        await callback.answer()
        return

    user_id = callback.from_user.id

    try:
        info_dict = await finalize_successful_order(
            user_id=user_id,
            product_id=product_id,
            pvz_id=pvz_id,
            full_name=data.get("full_name", ""),
        )
    except ValueError as e:
        await callback.message.edit_text(escape(str(e)))
        await callback.answer()
        return

    text = format_order_message(info_dict, "pvz", "")

    await state.clear()
    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb = InlineKeyboardBuilder()
    kb.button(text="‚Ü©", callback_data="back")
    kb.adjust(1)
    await callback.message.edit_text(
        text,
        reply_markup=kb.as_markup(),
    )
    await callback.answer()
