import contextlib
import logging
import time
import datetime as dt

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.steps_bot.db.models.walk import WalkForm
from app.steps_bot.presentation.keyboards.simple_kb import (
    end_walk_kb,
    walk_back_kb,
    walk_choice,
)
from app.steps_bot.services.coefficients_service import get_total_multiplier
from app.steps_bot.services.weather_service import get_current_temp_c
from app.steps_bot.states.walk import WalkStates
from app.steps_bot.storage.user_memory import (
    user_coords,
    user_steps,
    user_msg_id,
    user_walk_finished,
    user_walk_multiplier,
    user_walk_form,
    user_walk_started_at,
    user_temp_c,
    user_temp_updated_at,
    user_daily_steps_used,
    user_daily_steps_date,
)

router = Router()
logger = logging.getLogger(__name__)

DEFAULT_STEP_GOAL = 3000  # –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç


@router.callback_query(F.data == "walk_rolldog")
async def ask_for_stroller_dog_walk_location(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥—É–ª–∫—É —Å —Å–æ–±–∞–∫–æ–π –∏ –∫–æ–ª—è—Å–∫–æ–π –∏ –ø—Ä–æ—Å–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∞–π–≤-–ª–æ–∫–∞—Ü–∏—é. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞.
    """
    await callback.message.delete()
    await callback.message.answer(
        "üê∂üë∂ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É —Å —Å–æ–±–∞–∫–æ–π –∏ –∫–æ–ª—è—Å–∫–æ–π, –æ—Ç–∫—Ä–æ–π –º–µ–Ω—é –≤–ª–æ–∂–µ–Ω–∏–π (üìé) –∏ –æ—Ç–ø—Ä–∞–≤—å –ª–∞–π–≤-–ª–æ–∫–∞—Ü–∏—é.",
        reply_markup=walk_back_kb,
    )
    await state.set_state(WalkStates.waiting_for_rolldog_walk_location)
    await callback.answer()


@router.callback_query(WalkStates.waiting_for_rolldog_walk_location, F.data == "walk_back")
async def cancel_stroller_dog_walk_location(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –≤–∏–¥–∞ –ø—Ä–æ–≥—É–ª–∫–∏.
    """
    await state.clear()
    with contextlib.suppress(Exception):
        await callback.message.delete()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ø—Ä–æ–≥—É–ª–∫–∏:", reply_markup=walk_choice)
    await callback.answer()


@router.message(WalkStates.waiting_for_rolldog_walk_location, F.location)
async def process_stroller_dog_walk_location(
    message: Message,
    state: FSMContext,
) -> None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∞–π–≤-–ª–æ–∫–∞—Ü–∏—é, —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—Ç –ø—Ä–æ–≥—É–ª–∫–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å.
    """
    location = message.location
    user_id = message.from_user.id

    user_walk_finished.pop(user_id, None)

    today = dt.date.today().isoformat()
    if user_daily_steps_date.get(user_id) != today:
        user_daily_steps_date[user_id] = today
        user_daily_steps_used[user_id] = 0
    remaining = max(0, DEFAULT_STEP_GOAL - int(user_daily_steps_used.get(user_id, 0)))

    if remaining <= 0:
        await callback.message.delete()
        await callback.message.answer(
            "üèÅ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —à–∞–≥–æ–≤ —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!",
            reply_markup=walk_back_kb,
        )
        await callback.answer()
        return

    await state.update_data(step_goal=remaining)

    if not location.live_period:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ –ª–∞–π–≤-–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ üìé")
        return

    user_coords.pop(user_id, None)
    user_steps.pop(user_id, None)
    user_msg_id.pop(user_id, None)

    current_coords = (location.latitude, location.longitude)
    user_coords[user_id] = (current_coords, time.time())
    user_steps[user_id] = 0

    temp_c = await get_current_temp_c(current_coords[0], current_coords[1])
    user_temp_c[user_id] = temp_c
    user_temp_updated_at[user_id] = time.time()

    user_walk_form[user_id] = WalkForm.STROLLER_DOG
    multiplier = await get_total_multiplier(WalkForm.STROLLER_DOG, temp_c=temp_c)
    user_walk_multiplier[user_id] = multiplier
    user_walk_started_at[user_id] = time.time()

    temp_str = (
        f"{'+' if (temp_c is not None and temp_c >= 0) else ''}{temp_c}¬∞C"
        if temp_c is not None
        else "–Ω/–¥"
    )

    sent = await message.answer(
        f"{temp_str}\n"
        f"üö∂ –í—ã –ø—Ä–æ—à–ª–∏: 0 / {remaining} —à–∞–≥–æ–≤\n"
        f"‚≠ê –ë–∞–ª–ª—ã: 0 (–∫–æ—ç—Ñ—Ñ: √ó{multiplier})",
        reply_markup=end_walk_kb,
    )
    user_msg_id[user_id] = {"chat_id": message.chat.id, "message_id": sent.message_id}
    logger.info(
        "–ù–∞—á–∞–ª–æ –ø—Ä–æ–≥—É–ª–∫–∏ (—Å–æ–±–∞–∫–∞+–∫–æ–ª—è—Å–∫–∞) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: message_id=%s; temp=%s; mul=%s",
        user_id,
        sent.message_id,
        temp_c,
        multiplier,
    )
    await state.clear()
