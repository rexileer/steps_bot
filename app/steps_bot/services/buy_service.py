from __future__ import annotations

import json
import time
from html import escape
from typing import Any, Dict, Tuple, Optional

import contextlib
from app.steps_bot.settings import config
from app.steps_bot.states.order import OrderInput
from app.steps_bot.db import repo
from app.steps_bot.services.ledger_service import (
    purchase_from_family_proportional,
    purchase_from_user,
)


def _order_number(user_id: int, product_id: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.
    """
    ts = int(time.time())
    return f"TG-{user_id}-{product_id}-{ts}"


async def load_product_summary(product_id: int) -> Optional[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    async with repo.get_session() as session:
        result = await repo.get_product_with_category(session, product_id)
        if not result:
            return None
        product, category = result
        return {
            "product_id": product.id,
            "title": product.title,
            "category": category.name if category else None,
            "price": product.price,
        }


async def finalize_successful_order(
    user_id: int,
    product_id: int,
    pvz_id: str,
    full_name: str = "",
) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑, —Å–ø–∏—Å—ã–≤–∞–µ—Ç –±–∞–ª–ª—ã —Å —Å–µ–º—å–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–∏—à–µ—Ç –ø—Ä–æ–≤–æ–¥–∫–∏.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (telegram –∏–ª–∏ –ë–î)
        product_id: ID —Ç–æ–≤–∞—Ä–∞
        pvz_id: ID –ü–í–ó –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
        full_name: –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª—å)
    """
    async with repo.get_session() as session:
        result = await repo.get_product_with_category(session, product_id)
        if not result:
            raise ValueError("–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        product, category = result
        user, family, _ = await repo.get_user_with_family(session, user_id)
        
        # –ü–∞—Ä—Å–∏–º –§–ò–û –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑
        first_name, last_name = "", ""
        if full_name:
            parts = full_name.strip().split()
            if len(parts) >= 2:
                last_name = parts[0]  # –§–∞–º–∏–ª–∏—è
                first_name = parts[1]  # –ò–º—è
            elif len(parts) == 1:
                last_name = parts[0]  # –¢–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—è
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ —Å–µ–º—å–µ –∏–ª–∏ –ø–æ –ª–∏—á–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É
        if family:
            enough_family = await repo.family_points_enough(session, family.id, int(product.price))
            if not enough_family:
                raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ —Å–µ–º—å–∏")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
            if int(user.balance) < int(product.price):
                raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤")

        order = await repo.create_order_with_item(
            session=session,
            user_id=user.id,
            product=product,
            pvz_id=pvz_id,
            recipient_first_name=first_name,
            recipient_last_name=last_name,
        )

        if family:
            await purchase_from_family_proportional(
                session=session,
                family_id=family.id,
                amount=int(product.price),
                order_id=order.id,
                title="–ü–æ–∫—É–ø–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ",
                description=product.title,
            )
        else:
            await purchase_from_user(
                session=session,
                user_id_or_telegram=user.id,
                amount=int(product.price),
                order_id=order.id,
                title="–ü–æ–∫—É–ø–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ",
                description=product.title,
            )

        await repo.delete_product(session, product.id)

        return {
            "order_id": order.id,
            "product_title": product.title,
            "category_name": category.name if category else None,
            "price": int(product.price),
            "pvz_id": pvz_id,
        }


def format_order_message(info: Dict[str, Any], delivery_kind: str, destination: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ—á–Ω–æ–µ, –∫–∞–∫ –≤ –¢–ó).
    """
    return "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ! \nüéÅ –ö–∞–∫ –∏–¥–µ—Ç –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ, –∫–æ—Ç–æ—Ä—É—é –Ø–Ω–¥–µ–∫—Å –≤—ã—Å–ª–∞–ª –≤ —Å–º—Å."


async def probe_cdek_order(order: OrderInput, user_id: int, city_code: int | None) -> tuple[bool, str]:
    """
    –ó–∞–≥–ª—É—à–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ CDEK —É–±—Ä–∞–Ω).
    """
    return False, "CDEK integration removed"


async def ensure_purchase_allowed(user_id: int, product_id: int) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏: —Ç–æ–≤–∞—Ä –∞–∫—Ç–∏–≤–µ–Ω, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–µ–º—å—è,
    –∏ —Å—É–º–º–∞—Ä–Ω—ã—Ö –±–∞–ª–ª–æ–≤ —Å–µ–º—å–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, —Å–æ–æ–±—â–µ–Ω–∏–µ_–¥–ª—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
    """
    async with repo.get_session() as session:
        result = await repo.get_product_with_category(session, product_id)
        if not result:
            return False, "–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —É–∂–µ –∫—É–ø–ª–µ–Ω."

        product, _ = result
        try:
            user, family, _ = await repo.get_user_with_family(session, user_id)
        except ValueError:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

        if family:
            enough_family = await repo.family_points_enough(session, family.id, int(product.price))
            if not enough_family:
                return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ —Å–µ–º—å–∏."
            return True, "ok"

        # –ë–µ–∑ —Å–µ–º—å–∏ ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –ª–∏—á–Ω—ã—Ö –±–∞–ª–ª–æ–≤
        if int(user.balance) < int(product.price):
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤."

        return True, "ok"
